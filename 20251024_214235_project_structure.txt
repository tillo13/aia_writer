Number of files: 10
Number of directories: 6

Directory structure:
.
static
static/stories
templates
utilities
utilities/__pycache__

List of file paths by type:

CSS Files (1):
  ./static/style.css

HTML Files (3):
  ./templates/base.html
  ./templates/chat.html
  ./templates/style.html

JS Files (1):
  ./static/app.js

PY Files (5):
  ./app.py
  ./gather_files.py
  ./utilities/anthropic_utils.py
  ./utilities/google_secret_utils.py
  ./utilities/replicate_utils.py

================================================================================
FILE CONTENTS
================================================================================

FILE: ./gather_files.py
--------------------------------------------------------------------------------
import os
from datetime import datetime

# Configuration
# Set file types to include
FILE_EXTENSIONS = [
    '.py',    # Python files (always included)
    '.html',  # HTML files
    '.js',    # JavaScript files
    '.css',   # CSS files
    '.json',  # JSON configuration files
    '.md',  #  configuration files
        #'.txt',  #  configuration files
]

# Filename patterns to exclude (new)
EXCLUDED_FILENAME_PATTERNS = [
    'copy',   # Any file with 'copy' in the name
    'test',   # Any file with 'test' in the name
    'backup', # Any file with 'backup' in the name
    'temp',   # Any file with 'temp' in the name
]

# Directories to completely exclude from both scanning and output
EXCLUDED_DIRECTORIES = [
    ".venv", 
    ".git", 
    "venv", 
    "venv_kumori", 
    "css_OLD"
]

def gather_files(root_dir, excluded_directories, file_extensions, excluded_patterns):
    """
    Gathers files with specified extensions within the root directory and its subdirectories,
    excluding specified directories and filename patterns.

    Parameters:
        root_dir (str): The root directory to search for files.
        excluded_directories (list): List of directory names to exclude.
        file_extensions (list): List of file extensions to include.
        excluded_patterns (list): List of filename patterns to exclude.

    Returns:
        tuple: (files_data, included_directories)
    """
    files_data = []
    included_directories = set()

    for dirpath, dirnames, filenames in os.walk(root_dir):
        # Get the relative path
        relative_path = os.path.relpath(dirpath, root_dir)
        
        # Skip excluded directories - check if any part of the path matches exclusion patterns
        should_exclude = False
        for excluded_dir in excluded_directories:
            # Check both exact match and path-based matches
            if excluded_dir == relative_path or excluded_dir in relative_path.replace('\\', '/'):
                should_exclude = True
                break
                
        if should_exclude:
            continue

        # Add directory to our structure
        included_directories.add(relative_path)
        
        # Process files
        for filename in filenames:
            file_path = os.path.join(dirpath, filename)
            
            # Skip files with excluded patterns in the filename
            if any(pattern.lower() in filename.lower() for pattern in excluded_patterns):
                continue
                
            # Only include files with the specified extensions
            if any(filename.endswith(ext) for ext in file_extensions):
                try:
                    with open(file_path, 'r', encoding='utf-8') as file:
                        file_contents = file.read()
                    files_data.append((file_path, file_contents))
                except UnicodeDecodeError:
                    print(f"Could not read file {file_path} due to encoding error. Skipping.")
                except Exception as e:
                    print(f"Error with file {file_path}: {e}")

    return files_data, sorted(included_directories)

def write_to_file(output_filepath, files_data, included_directories):
    """
    Writes the gathered data to a file with project information and file contents.
    """
    with open(output_filepath, 'w', encoding='utf-8') as file:
        # Write statistics
        file.write(f"Number of files: {len(files_data)}\n")
        file.write(f"Number of directories: {len(included_directories)}\n\n")
        
        # Write directory structure
        file.write("Directory structure:\n")
        for directory in included_directories:
            file.write(f"{directory}\n")
        file.write("\n")
        
        # Group and list files by extension
        extension_groups = {}
        for filepath, _ in files_data:
            ext = os.path.splitext(filepath)[1].lower()
            if ext not in extension_groups:
                extension_groups[ext] = []
            extension_groups[ext].append(filepath)
        
        file.write("List of file paths by type:\n")
        for ext, filepaths in sorted(extension_groups.items()):
            file.write(f"\n{ext.upper()[1:]} Files ({len(filepaths)}):\n")
            for filepath in sorted(filepaths):
                file.write(f"  {filepath}\n")
        file.write("\n")
        
        # Write file contents
        file.write("="*80 + "\n")
        file.write("FILE CONTENTS\n")
        file.write("="*80 + "\n\n")
        
        for filepath, file_contents in files_data:
            file.write(f"FILE: {filepath}\n")
            file.write("-"*80 + "\n")
            file.write(f"{file_contents}\n\n")
            file.write("="*80 + "\n\n")

def scan_project_structure():
    """
    Main function to scan the project structure and write the results to a file.
    """
    root_dir = "."  # Current directory
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_filepath = f"{timestamp}_project_structure.txt"
    
    print(f"Starting to scan project structure at {root_dir}...")
    print(f"Including file types: {', '.join(FILE_EXTENSIONS)}")
    print(f"Excluding file patterns: {', '.join(EXCLUDED_FILENAME_PATTERNS)}")
    print(f"Excluding directories: {', '.join(EXCLUDED_DIRECTORIES)}")
    
    # Gather files and directory information
    files_data, included_directories = gather_files(
        root_dir, 
        EXCLUDED_DIRECTORIES, 
        FILE_EXTENSIONS,
        EXCLUDED_FILENAME_PATTERNS
    )
    
    print(f"Found {len(files_data)} files across {len(included_directories)} directories.")
    print(f"Excluded directories won't appear in the output file.")
    
    # Write the output file
    write_to_file(
        output_filepath, 
        files_data, 
        included_directories
    )
    
    print(f"Project structure has been written to {output_filepath}")
    print(f"File size: {os.path.getsize(output_filepath) / (1024*1024):.2f} MB")

if __name__ == "__main__":
    scan_project_structure()

================================================================================

FILE: ./app.py
--------------------------------------------------------------------------------
import os,sys,subprocess,webbrowser,threading,time,logging,concurrent.futures
from flask import Flask,render_template,request,jsonify,Response
from utilities.anthropic_utils import analyze_style_and_fetch_news,restyle_content,stream_chat,fetch_news_only
from utilities.replicate_utils import generate,get_models

logging.basicConfig(level=logging.INFO,format='%(asctime)s-%(levelname)s-%(message)s')
logger=logging.getLogger(__name__)

app=Flask(__name__)
MODELS={"Sonnet 3.5 (Fast)":"claude-3-5-sonnet-latest","Sonnet 4 (Balanced)":"claude-sonnet-4-20250514","Opus 4.1 (Smartest)":"claude-opus-4-1-20250805","Haiku 3.5 (Fastest)":"claude-3-5-haiku-latest"}

# News cache - 5min TTL
NEWS_CACHE={"news":None,"ts":0}

def kill_port_5000():
    try:
        result=subprocess.run(['lsof','-ti:5000'],capture_output=True,text=True,timeout=5)
        if result.returncode==0 and result.stdout.strip():
            for pid in result.stdout.strip().split('\n'):
                try:logger.info(f"üî• Kill {pid}");subprocess.run(['kill','-9',pid],timeout=5)
                except Exception as e:logger.warning(f"Could not kill {pid}: {e}")
        else:logger.info("‚úÖ Port free")
    except:subprocess.run(['pkill','-f','flask.*5000'],timeout=5)

@app.route('/')
def home():
    logger.info("üè† Home page loaded")
    return render_template('style.html')

@app.route('/chat')
def chat_page():
    logger.info("üí¨ Chat page loaded")
    return render_template('chat.html',models=MODELS)

@app.route('/prefetch_news')
def prefetch_news():
    """Pre-fetch news on file button click - cached 5min"""
    logger.info("="*80)
    logger.info("üì° /prefetch_news ENDPOINT CALLED")
    logger.info("‚è±Ô∏è  Request received at: %s", time.strftime('%H:%M:%S'))
    
    now=time.time()
    
    # Check cache
    if NEWS_CACHE["news"] and (now-NEWS_CACHE["ts"])<300:
        cache_age = int(now - NEWS_CACHE["ts"])
        logger.info("üíæ RETURNING CACHED NEWS")
        logger.info(f"üìä Cache age: {cache_age} seconds (TTL: 300s)")
        logger.info(f"üì∞ News length: {len(NEWS_CACHE['news'])} characters")
        logger.info("="*80)
        return jsonify({"news":NEWS_CACHE["news"],"cached":True})
    
    # Fetch fresh news
    logger.info("üîÑ Cache expired or empty - fetching fresh news")
    fetch_start = time.time()
    
    try:
        logger.info("üöÄ Calling fetch_news_only()...")
        news=fetch_news_only()
        
        fetch_duration = time.time() - fetch_start
        NEWS_CACHE["news"]=news
        NEWS_CACHE["ts"]=now
        
        logger.info("‚úÖ NEWS FETCH COMPLETE")
        logger.info(f"‚è±Ô∏è  Fetch duration: {fetch_duration:.2f}s")
        logger.info(f"üì∞ News length: {len(news)} characters")
        logger.info(f"üíæ Cached for 300 seconds")
        logger.info("="*80)
        
        return jsonify({"news":news,"cached":False})
    except Exception as e:
        fetch_duration = time.time() - fetch_start
        logger.error("="*80)
        logger.error("‚ùå NEWS FETCH ERROR")
        logger.error(f"‚è±Ô∏è  Failed after: {fetch_duration:.2f}s")
        logger.error(f"üìõ Error: {e}")
        logger.error("="*80)
        return jsonify({"error":str(e)}),500

@app.route('/analyze',methods=['POST'])
def analyze():
    """Analyze writing style from uploaded files"""
    logger.info("="*80)
    logger.info("üìÑ /analyze ENDPOINT CALLED")
    
    files=request.files.getlist('files')
    if not files:
        logger.warning("‚ö†Ô∏è  No files provided")
        return jsonify({'error':'No files'}),400
    if len(files)>5:
        logger.warning("‚ö†Ô∏è  Too many files: %d", len(files))
        return jsonify({'error':'Max 5 files'}),400
    
    logger.info(f"üìÅ Received {len(files)} files:")
    for f in files:
        logger.info(f"   üìé {f.filename} ({len(f.read())/1024:.1f} KB)")
        f.seek(0)  # Reset file pointer after reading size
    
    analyze_start = time.time()
    logger.info("üî¨ Starting style analysis...")
    
    try:
        style_json,news = analyze_style_and_fetch_news(files)
        
        analyze_duration = time.time() - analyze_start
        logger.info("‚úÖ ANALYSIS COMPLETE")
        logger.info(f"‚è±Ô∏è  Total duration: {analyze_duration:.2f}s")
        logger.info(f"üìä Style JSON type: {type(style_json).__name__}")
        logger.info("="*80)
        
        return jsonify({'style_json':style_json,'news':news})
    except Exception as e:
        analyze_duration = time.time() - analyze_start
        logger.error("‚ùå ANALYSIS ERROR")
        logger.error(f"‚è±Ô∏è  Failed after: {analyze_duration:.2f}s")
        logger.error(f"üìõ Error: {e}",exc_info=True)
        logger.error("="*80)
        return jsonify({'error':str(e)}),500

@app.route('/analyze_style',methods=['POST'])
def analyze_style():
    """Legacy endpoint - redirects to /analyze"""
    logger.info("‚ö†Ô∏è  Legacy /analyze_style called, processing...")
    return analyze()

@app.route('/restyle',methods=['POST'])
def restyle():
    logger.info("="*80)
    logger.info("üé® /restyle ENDPOINT CALLED")
    
    data=request.json
    if not data.get('style')or not data.get('news'):
        logger.warning("‚ö†Ô∏è  Missing style or news data")
        return jsonify({'error':'Missing data'}),400
    
    logger.info("ü§ñ Using Claude Sonnet 4")
    restyle_start = time.time()
    
    try:
        styled=restyle_content(data['style'],data['news'])
        
        # Calculate cost (Claude Sonnet 4 pricing)
        # Input: $3/MTok, Output: $15/MTok (approximate)
        input_tokens = (len(str(data['style'])) + len(data['news'])) / 4  # rough estimate
        output_tokens = len(styled) / 4  # rough estimate
        cost = (input_tokens * 3 / 1_000_000) + (output_tokens * 15 / 1_000_000)
        
        restyle_duration = time.time() - restyle_start
        logger.info("‚úÖ RESTYLE COMPLETE")
        logger.info(f"‚è±Ô∏è  Duration: {restyle_duration:.2f}s")
        logger.info(f"üìù Output length: {len(styled)} characters")
        logger.info(f"üí∞ Cost: ${cost:.6f}")
        logger.info("="*80)
        
        return jsonify({'styled':styled,'cost':cost})
    except Exception as e:
        restyle_duration = time.time() - restyle_start
        logger.error("‚ùå RESTYLE ERROR")
        logger.error(f"‚è±Ô∏è  Failed after: {restyle_duration:.2f}s")
        logger.error(f"üìõ Error: {e}",exc_info=True)
        logger.error("="*80)
        return jsonify({'error':str(e)}),500

@app.route('/restyle_with_model',methods=['POST'])
def restyle_with_model():
    logger.info("="*80)
    logger.info("üé® /restyle_with_model ENDPOINT CALLED")
    
    data=request.json
    if not data.get('style')or not data.get('news')or not data.get('model'):
        logger.warning("‚ö†Ô∏è  Missing required data")
        return jsonify({'error':'Missing data'}),400
    
    model = data['model']
    logger.info(f"ü§ñ Model: {model}")
    
    prompt=f"""You are a writing style adapter. You have been given:

1. A detailed JSON style profile of a writer
2. An AI news article (originally written by {data.get('claude_version','Claude Sonnet 4')})

Your task: Rewrite the news article to match the writer's style perfectly.

STYLE PROFILE:
{data['style']}

ORIGINAL NEWS ARTICLE:
{data['news']}

Instructions:
- Apply ALL patterns from the style profile
- Match their conversational voice markers and recurring phrases
- Use their sentence structures and paragraph rhythm
- Incorporate their authenticity markers (how they use specifics, admit uncertainty, etc)
- Follow their opening and closing patterns
- Avoid their anti-patterns
- Keep the same factual content but transform the voice completely

Output ONLY the rewritten article, no explanations."""
    
    restyle_start = time.time()
    logger.info("üöÄ Generating with model...")
    
    try:
        success,text,cost=generate(model,prompt,4000)
        
        restyle_duration = time.time() - restyle_start
        
        if not success:
            logger.error("‚ùå GENERATION FAILED")
            logger.error(f"‚è±Ô∏è  Failed after: {restyle_duration:.2f}s")
            logger.error(f"üìõ Error: {text}")
            logger.error("="*80)
            return jsonify({'error':text}),500
        
        logger.info("‚úÖ RESTYLE WITH MODEL COMPLETE")
        logger.info(f"‚è±Ô∏è  Duration: {restyle_duration:.2f}s")
        logger.info(f"üí∞ Cost: ${cost:.6f}")
        logger.info(f"üìù Output length: {len(text)} characters")
        logger.info("="*80)
        
        return jsonify({'styled':text,'cost':cost,'model':model})
    except Exception as e:
        restyle_duration = time.time() - restyle_start
        logger.error("‚ùå RESTYLE ERROR")
        logger.error(f"‚è±Ô∏è  Failed after: {restyle_duration:.2f}s")
        logger.error(f"üìõ Error: {e}",exc_info=True)
        logger.error("="*80)
        return jsonify({'error':str(e)}),500

@app.route('/available_models',methods=['GET'])
def available_models():
    logger.info("üìã /available_models called")
    models = get_models()
    logger.info(f"‚úÖ Returning {len(models)} models")
    return jsonify({'models':models})

@app.route('/chat',methods=['POST'])
def chat():
    data=request.json
    message=data.get('message','')
    model=data.get('model','claude-3-5-sonnet-latest')
    messages=data.get('messages',[{"role":"user","content":message}])
    temperature=float(data.get('temperature',1.0))
    max_tokens=int(data.get('max_tokens',1024))
    web_search=data.get('web_search',False)
    thinking=data.get('thinking',False)
    
    logger.info("="*80)
    logger.info("üí¨ CHAT REQUEST")
    logger.info(f"üìù Message: {message[:100]}{'...'if len(message)>100 else''}")
    logger.info(f"ü§ñ Model: {model}")
    logger.info(f"üîç Web Search: {web_search}")
    logger.info(f"üß† Thinking: {thinking}")
    logger.info(f"üå°Ô∏è  Temperature: {temperature}")
    logger.info(f"üìä Max Tokens: {max_tokens}")
    
    def generate():
        try:
            logger.info("üöÄ Initializing client...")
            start=time.time()
            tokens=0
            
            for text in stream_chat(model,messages,temperature,max_tokens,web_search,thinking):
                tokens+=1
                if tokens==1:
                    ttft = time.time()-start
                    logger.info(f"‚ö° First token in {ttft:.2f}s")
                yield f"data: {text}\n\n"
            
            elapsed=time.time()-start
            logger.info("‚úÖ CHAT COMPLETE")
            logger.info(f"üìä Tokens: {tokens}")
            logger.info(f"‚è±Ô∏è  Duration: {elapsed:.2f}s")
            logger.info(f"‚ö° Speed: {tokens/elapsed:.1f} tok/s")
            yield"data: [DONE]\n\n"
            logger.info("="*80)
            
        except Exception as e:
            logger.error("‚ùå CHAT ERROR")
            logger.error(f"üìõ Error: {e}",exc_info=True)
            logger.error("="*80)
            yield f"data: Error: {str(e)}\n\n"
    
    return Response(generate(),mimetype='text/event-stream')

if __name__=='__main__':
    logger.info("="*80)
    logger.info("üßπ Cleaning up port 5000...")
    kill_port_5000()
    time.sleep(0.5)
    
    logger.info("üöÄ STARTING FLASK APP")
    logger.info("üì± URL: http://127.0.0.1:5000")
    logger.info("‚å®Ô∏è  Press Ctrl+C to stop")
    logger.info("="*80)
    
    threading.Thread(target=lambda:time.sleep(1.5)or webbrowser.open('http://127.0.0.1:5000'),daemon=True).start()
    
    try:
        app.run(host='127.0.0.1',port=5000,debug=False,use_reloader=False)
    except KeyboardInterrupt:
        logger.info("\n")
        logger.info("="*80)
        logger.info("üëã Shutting down gracefully...")
        logger.info("="*80)
        sys.exit(0)

================================================================================

FILE: ./utilities/google_secret_utils.py
--------------------------------------------------------------------------------
"""Google Secret Manager utilities for kumori apps"""
import subprocess
from google.cloud import secretmanager

def get_secret(secret_id: str, project_id: str = "kumori-404602"):
    """Get secret from GCP Secret Manager with auto project switching"""
    original = subprocess.run(['gcloud','config','get-value','project'], capture_output=True, text=True).stdout.strip()
    if original != project_id:
        subprocess.run(['gcloud','config','set','project',project_id], capture_output=True)
    
    try:
        client = secretmanager.SecretManagerServiceClient()
        name = f"projects/{project_id}/secrets/{secret_id}/versions/latest"
        secret = client.access_secret_version(request={"name": name}).payload.data.decode('UTF-8')
        if original != project_id:
            subprocess.run(['gcloud','config','set','project',original], capture_output=True)
        return secret
    except Exception as e:
        if original != project_id:
            subprocess.run(['gcloud','config','set','project',original], capture_output=True)
        return None

================================================================================

FILE: ./utilities/replicate_utils.py
--------------------------------------------------------------------------------
"""All Replicate functionality"""
import replicate
from .google_secret_utils import get_secret

MODELS = {
    "gpt-5-nano": {"id": "openai/gpt-5-nano", "name": "GPT-5 Nano", "description": "Fastest & cheapest", "pricing": {"input": 0.05, "output": 0.40}},
    "gpt-oss-120b": {"id": "openai/gpt-oss-120b", "name": "GPT-OSS 120B", "description": "Best value", "pricing": {"input": 0.18, "output": 0.72}},
    "gpt-4o-mini": {"id": "openai/gpt-4o-mini", "name": "GPT-4o Mini", "description": "Fast", "pricing": {"input": 0.15, "output": 0.60}},
    "gpt-5-mini": {"id": "openai/gpt-5-mini", "name": "GPT-5 Mini", "description": "Balanced", "pricing": {"input": 0.25, "output": 2.00}},
    "gemini-2.5-flash": {"id": "google/gemini-2.5-flash", "name": "Gemini 2.5 Flash", "description": "Google fast", "pricing": {"input": 2.50, "output": 2.50}},
    "gpt-5": {"id": "openai/gpt-5", "name": "GPT-5", "description": "Excellent", "pricing": {"input": 1.25, "output": 10.00}}
}

def get_client():
    return replicate.Client(api_token=get_secret('KUMORI_REPLICATE_API_KEY'))

def generate(model_key, prompt, max_tokens=2048):
    """Returns (success, text, cost)"""
    if model_key not in MODELS:
        return False, f"Unknown model: {model_key}", 0.0
    
    client = get_client()
    if not client:
        return False, "No client", 0.0
    
    try:
        output = client.run(MODELS[model_key]["id"], input={"prompt": prompt, "temperature": 0.7, "max_tokens": max_tokens})
        text = ''.join(str(x) for x in output) if hasattr(output, '__iter__') and not isinstance(output, str) else str(output)
        text = text.strip()
        
        pricing = MODELS[model_key]["pricing"]
        input_tokens = len(prompt) // 4
        output_tokens = len(text) // 4
        cost = (input_tokens / 1_000_000) * pricing["input"] + (output_tokens / 1_000_000) * pricing["output"]
        
        return True, text, cost
    except Exception as e:
        return False, str(e), 0.0

def get_models():
    return [{"key": k, "name": v["name"], "description": v["description"]} for k, v in MODELS.items()]

================================================================================

FILE: ./utilities/anthropic_utils.py
--------------------------------------------------------------------------------
"""All Anthropic/Claude functionality - optimized"""
import base64,concurrent.futures,re
from anthropic import Anthropic
from .google_secret_utils import get_secret

def get_client():
    return Anthropic(api_key=get_secret('KUMORI_ANTHROPIC_API_KEY'))

def strip_markdown_code_fence(text):
    """Remove markdown code fences (```json, ```, etc.) from text"""
    # Remove opening code fence (```json or ```)
    text = re.sub(r'^```(?:json)?\s*\n', '', text, flags=re.MULTILINE)
    # Remove closing code fence (```)
    text = re.sub(r'\n```\s*$', '', text, flags=re.MULTILINE)
    return text.strip()

def fetch_news_only():
    """Just fetch news - fast and cacheable"""
    client=get_client()
    r=client.messages.create(model="claude-sonnet-4-20250514",max_tokens=2000,
        tools=[{"type":"web_search_20250305","name":"web_search"}],
        messages=[{"role":"user","content":"Find the single biggest AI tech news story from today and summarize it in 3-4 paragraphs. Include what happened, why it matters, and key details."}])
    return ''.join(b.text for b in r.content if b.type=="text")

def analyze_style_only(files):
    """Just analyze style - returns JSON string"""
    client=get_client()
    content=[]
    
    for f in files:
        data=f.read()
        b64=base64.b64encode(data).decode('utf-8')
        ext=f.filename.split('.')[-1].lower()
        
        if ext=='pdf':
            content.append({"type":"document","source":{"type":"base64","media_type":"application/pdf","data":b64}})
        elif ext in['jpg','jpeg','png','gif','webp']:
            content.append({"type":"image","source":{"type":"base64","media_type":f"image/{ext if ext!='jpg'else'jpeg'}","data":b64}})
        else:
            text=data.decode('utf-8',errors='ignore')
            content.append({"type":"text","text":f"<document name='{f.filename}'>\n{text}\n</document>"})
    
    content.append({"type":"text","text":"""You are a writing style analyst. Analyze all provided documents to extract the author's complete writing DNA.

Extract and output a JSON object with this exact structure:

{
  "conversational_patterns": {
    "natural_voice_markers": ["phrases appearing 5+ times - their verbal tics and recurring language"],
    "opening_patterns": ["common first paragraph structures as templates with {placeholders}"],
    "transition_phrases": ["recurring connectors between ideas"],
    "closing_patterns": ["common ending structures as templates"]
  },
  
  "authenticity_markers": {
    "vulnerability_patterns": ["how they admit mistakes, share failures, show uncertainty"],
    "technical_authenticity": ["how they use real numbers, specs, metrics, timestamps, costs"],
    "what_they_never_fabricate": ["things they're always specific about vs vague"]
  },
  
  "style_fingerprints": {
    "sentence_patterns": ["typical structures - short? questions? compound?"],
    "paragraph_rhythm": "how they structure paragraphs",
    "tone": "their consistent voice quality",
    "technical_depth": "how deep they go with details"
  },
  
  "signature_elements": {
    "analogies": ["recurring metaphors or comparison styles"],
    "examples": ["types of examples they use"],
    "interaction_style": "how they address readers"
  },
  
  "anti_patterns": {
    "never_uses": ["words/phrases consistently absent"],
    "avoids": ["patterns they consciously avoid - hype, corporate speak, etc"]
  }
}

Rules:
- Only include patterns appearing in 3+ documents
- Use exact phrases from documents for voice_markers
- Create templates with {placeholders} for patterns
- Be specific, not generic
- Output ONLY valid JSON, no explanation"""})
    
    r=client.messages.create(model="claude-sonnet-4-20250514",max_tokens=8000,messages=[{"role":"user","content":content}])
    raw_text = r.content[0].text
    # Strip markdown code fences if present
    return strip_markdown_code_fence(raw_text)

def analyze_style_and_fetch_news(files):
    """Run style analysis and news fetch IN PARALLEL"""
    with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
        style_future=executor.submit(analyze_style_only,files)
        news_future=executor.submit(fetch_news_only)
        
        style_json=style_future.result()
        news=news_future.result()
    
    return style_json,news

def restyle_content(style_json,news_text,model_name="Claude Sonnet 4"):
    """Restyle content using Claude"""
    client=get_client()
    
    prompt=f"""You are a writing style adapter. You have been given:

1. A detailed JSON style profile of a writer
2. An AI news article (originally written by {model_name})

Your task: Rewrite the news article to match the writer's style perfectly.

STYLE PROFILE:
{style_json}

ORIGINAL NEWS ARTICLE:
{news_text}

Instructions:
- Apply ALL patterns from the style profile
- Match their conversational voice markers and recurring phrases
- Use their sentence structures and paragraph rhythm
- Incorporate their authenticity markers (how they use specifics, admit uncertainty, etc)
- Follow their opening and closing patterns
- Avoid their anti-patterns
- Keep the same factual content but transform the voice completely

Output ONLY the rewritten article, no explanations."""
    
    r=client.messages.create(model="claude-sonnet-4-20250514",max_tokens=4000,messages=[{"role":"user","content":prompt}])
    return r.content[0].text

def stream_chat(model,messages,temperature,max_tokens,enable_web_search,enable_thinking):
    """Stream chat responses"""
    client=get_client()
    params={"model":model,"max_tokens":max_tokens,"temperature":temperature,"messages":messages}
    
    web_search_models=['claude-opus-4','claude-sonnet-4','claude-3-7-sonnet','claude-3-5-sonnet','claude-3-5-haiku']
    if enable_web_search and any(m in model for m in web_search_models):
        params["tools"]=[{"type":"web_search_20250305","name":"web_search"}]
    
    thinking_models=['claude-opus-4','claude-sonnet-4']
    if enable_thinking and any(m in model for m in thinking_models):
        params["thinking"]={"type":"enabled","budget_tokens":8000}
    
    with client.messages.stream(**params)as stream:
        for text in stream.text_stream:
            yield text

================================================================================

FILE: ./static/style.css
--------------------------------------------------------------------------------
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    background: #0f0f0f;
    color: #e0e0e0;
    min-height: 100vh;
    display: flex;
    flex-direction: column
}

.nav {
    background: #1a1a1a;
    padding: 15px 20px;
    border-bottom: 1px solid #333;
    display: flex;
    align-items: center;
    gap: 20px
}

.nav-brand {
    font-size: 18px;
    font-weight: 600;
    color: #2196F3;
    text-decoration: none;
    margin-right: auto
}

.nav-links {
    display: flex;
    gap: 15px;
    list-style: none
}

.nav-link {
    color: #e0e0e0;
    text-decoration: none;
    padding: 8px 16px;
    border-radius: 6px;
    transition: background .2s;
    font-size: 14px
}

.nav-link:hover {
    background: #2a2a2a
}

.nav-link.active {
    background: #2196F3;
    color: #fff
}

.chat-wrap {
    display: flex;
    flex-direction: column;
    height: calc(100vh - 61px)
}

.header {
    background: #1a1a1a;
    padding: 15px 20px;
    border-bottom: 1px solid #333;
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
    align-items: center
}

.header select,
.header input[type="range"] {
    background: #2a2a2a;
    color: #e0e0e0;
    border: 1px solid #444;
    padding: 6px 10px;
    border-radius: 6px;
    font-size: 13px
}

.toggle-group {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 13px
}

.toggle {
    position: relative;
    display: inline-block;
    width: 42px;
    height: 22px
}

.toggle input {
    display: none
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #444;
    transition: .3s;
    border-radius: 22px
}

.slider:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 3px;
    bottom: 3px;
    background-color: #fff;
    transition: .3s;
    border-radius: 50%
}

input:checked+.slider {
    background-color: #2196F3
}

input:checked+.slider:before {
    transform: translateX(20px)
}

.chat-container {
    flex: 1;
    overflow-y: auto;
    padding: 20px
}

.message {
    margin-bottom: 16px;
    padding: 12px 16px;
    border-radius: 8px;
    max-width: 85%;
    line-height: 1.5
}

.user {
    background: #2a4a7c;
    margin-left: auto
}

.assistant {
    background: #2a2a2a;
    white-space: pre-wrap
}

.input-area {
    background: #1a1a1a;
    padding: 15px 20px;
    border-top: 1px solid #333;
    display: flex;
    gap: 10px
}

#messageInput {
    flex: 1;
    background: #2a2a2a;
    color: #e0e0e0;
    border: 1px solid #444;
    padding: 10px 15px;
    border-radius: 8px;
    font-size: 14px;
    resize: none;
    font-family: inherit
}

#sendBtn {
    background: #2196F3;
    color: #fff;
    border: none;
    padding: 10px 24px;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    font-size: 14px
}

#sendBtn:hover {
    background: #1976D2
}

#sendBtn:disabled {
    background: #555;
    cursor: not-allowed
}

.slider-label {
    font-size: 12px;
    color: #999;
    display: flex;
    align-items: center;
    gap: 6px
}

.docs-wrap {
    padding: 40px 20px;
    max-width: 900px;
    margin: 0 auto
}

.upload-box {
    background: #1a1a1a;
    border: 2px dashed #444;
    border-radius: 12px;
    padding: 40px;
    text-align: center;
    margin-bottom: 30px
}

.upload-box h1 {
    margin-bottom: 10px;
    color: #2196F3;
    font-size: 28px
}

.upload-box p {
    color: #999;
    margin-bottom: 20px;
    font-size: 14px
}

input[type="file"] {
    margin: 20px 0;
    cursor: pointer
}

button {
    background: #2196F3;
    color: #fff;
    border: none;
    padding: 12px 32px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 600;
    transition: background .2s
}

button:hover {
    background: #1976D2
}

button:disabled {
    background: #555;
    cursor: not-allowed
}

.spinner {
    display: inline-block;
    width: 14px;
    height: 14px;
    border: 2px solid #fff;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
    margin-right: 8px
}

@keyframes spin {
    to {
        transform: rotate(360deg)
    }
}

.section {
    background: #2a2a2a;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    display: none
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    user-select: none;
    margin-bottom: 15px
}

.section-header h3 {
    color: #2196F3;
    font-size: 18px
}

.section-header .toggle-icon {
    color: #999;
    font-size: 20px;
    transition: transform .2s
}

.section-header .toggle-icon.open {
    transform: rotate(180deg)
}

.section-content {
    display: none;
    line-height: 1.6
}

.section-content.show {
    display: block
}

pre {
    background: #1a1a1a;
    padding: 15px;
    border-radius: 6px;
    overflow-x: auto;
    white-space: pre-wrap;
    font-size: 12px;
    line-height: 1.4;
    color: #0f0
}

.news-text {
    background: #1a1a1a;
    padding: 20px;
    border-radius: 6px;
    line-height: 1.8;
    font-size: 15px
}

.news-text p {
    margin-bottom: 12px
}

.styled-output {
    background: #1a1a1a;
    padding: 25px;
    border-radius: 6px;
    line-height: 1.8;
    font-size: 15px
}

.styled-output p {
    margin-bottom: 15px
}

.styled-output h1,
.styled-output h2,
.styled-output h3 {
    color: #2196F3;
    margin-top: 20px;
    margin-bottom: 10px
}

.cta-box {
    background: #1a4d2e;
    border: 1px solid #2a7a4a;
    border-radius: 8px;
    padding: 20px;
    text-align: center;
    margin-top: 15px
}

.cta-box h4 {
    color: #4ade80;
    margin-bottom: 10px;
    font-size: 16px
}

.cta-box button {
    background: #22c55e;
    font-size: 16px;
    padding: 14px 36px
}

.cta-box button:hover {
    background: #16a34a
}

.progress {
    color: #999;
    font-size: 13px;
    font-style: italic;
    margin-top: 10px
}

/* NEW: Model comparison styles */
.model-options {
    background: #1a1a1a;
    border: 1px solid #444;
    border-radius: 12px;
    padding: 30px;
    margin: 30px 0;
    display: none
}

.model-options h4 {
    margin: 0 0 8px 0;
    color: #2196F3;
    font-size: 20px
}

.model-options>p {
    margin: 0 0 20px 0;
    color: #999;
    font-size: 14px
}

.model-buttons {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 12px;
    margin-top: 20px
}

.model-btn {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    width: 100%;
    padding: 16px 20px;
    background: rgba(59, 130, 246, 0.08);
    border: 1px solid rgba(59, 130, 246, 0.25);
    border-radius: 8px;
    color: #fff;
    cursor: pointer;
    transition: all 0.25s ease;
    text-align: left
}

.model-btn:hover {
    background: rgba(59, 130, 246, 0.15);
    border-color: rgba(59, 130, 246, 0.4);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2)
}

.model-btn:active {
    transform: translateY(0)
}

.model-btn strong {
    display: block;
    margin-bottom: 6px;
    font-size: 15px;
    color: #60a5fa
}

.model-btn span {
    display: block;
    font-size: 12px;
    color: rgba(255, 255, 255, 0.5);
    font-weight: 400
}

.alt-models-container {
    margin-top: 30px;
    display: none
}

.model-output {
    background: #2a2a2a;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px
}

.model-output h3 {
    color: #2196F3;
    font-size: 16px;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    gap: 8px
}

.model-content {
    background: #1a1a1a;
    padding: 20px;
    border-radius: 6px;
    line-height: 1.8;
    font-size: 14px
}

.model-content p {
    margin-bottom: 12px
}

.cost-info {
    margin-top: 15px;
    padding: 10px 15px;
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.2);
    border-radius: 6px;
    font-size: 12px;
    color: #4ade80;
    display: inline-block
}

================================================================================

FILE: ./static/app.js
--------------------------------------------------------------------------------
let sty = null, nws = null;
let newsPromise = null; // Cache the news fetch promise
let newsFetchStartTime = null;

// Prefetch news immediately when file input is clicked
function prefetchNews() {
    if (newsPromise) {
        console.log('‚ÑπÔ∏è News fetch already in progress, skipping duplicate request');
        return; // Already fetching
    }

    newsFetchStartTime = Date.now();
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üöÄ NEWS FETCH STARTED IMMEDIATELY ON FILE BUTTON CLICK');
    console.log('‚è±Ô∏è  Started at:', new Date().toLocaleTimeString());
    console.log('üì° Endpoint: /prefetch_news');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    newsPromise = fetch('/prefetch_news')
        .then(r => {
            console.log('üì• Response received from server');
            console.log('‚è±Ô∏è  Response time:', (Date.now() - newsFetchStartTime) + 'ms');
            return r.json();
        })
        .then(d => {
            const totalTime = Date.now() - newsFetchStartTime;
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
            console.log('‚úÖ NEWS FETCH COMPLETE');
            console.log('‚è±Ô∏è  Total time:', totalTime + 'ms');
            console.log('üíæ Cached:', d.cached || false);
            console.log('üì∞ News length:', d.news?.length || 0, 'characters');
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
            return d.news;
        })
        .catch(e => {
            const totalTime = Date.now() - newsFetchStartTime;
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
            console.error('‚ùå NEWS FETCH ERROR');
            console.error('‚è±Ô∏è  Failed after:', totalTime + 'ms');
            console.error('üìõ Error:', e);
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
            newsPromise = null; // Reset on error so it can retry
            throw e;
        });
}

// Get news (either from cache or wait for prefetch)
async function getNews() {
    if (!newsPromise) {
        console.log('‚ö†Ô∏è  WARNING: No prefetch found, fetching now (this should not happen!)');
        prefetchNews();
    } else {
        console.log('‚è≥ Waiting for prefetched news to complete...');
    }

    const result = await newsPromise;
    console.log('‚úÖ News ready for use!');
    return result;
}

function toggle(id) {
    let c = document.getElementById(id + '-content'),
        i = document.getElementById(id + '-icon');
    // Check computed style, not inline style
    let isHidden = window.getComputedStyle(c).display === 'none';
    if (isHidden) {
        c.style.display = 'block';
        i.textContent = '‚ñº';
    } else {
        c.style.display = 'none';
        i.textContent = '‚ñ∂';
    }
}

async function analyze() {
    let f = document.getElementById('files').files;
    if (!f.length) {
        alert('Please select files first!');
        return;
    }

    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìÇ FILE ANALYSIS STARTED');
    console.log('üìÑ Number of files:', f.length);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    let s = document.getElementById('upload-status');
    s.innerHTML = '<p class="progress"><span class="spinner"></span>Analyzing your writing style...</p>';

    let fd = new FormData();
    for (let file of f) {
        console.log('üìé File:', file.name, '(' + (file.size / 1024).toFixed(1) + ' KB)');
        fd.append('files', file);
    }

    try {
        console.log('üì§ Sending files to /analyze endpoint...');
        const analyzeStartTime = Date.now();

        let r = await fetch('/analyze', { method: 'POST', body: fd });

        console.log('üì• Analysis response received in', (Date.now() - analyzeStartTime) + 'ms');

        let d = await r.json();

        if (d.error) {
            console.error('‚ùå Analysis error:', d.error);
            s.innerHTML = `<p style="color: #ef4444;">‚ùå Error: ${d.error}</p>`;
            return;
        }

        sty = d.style_json;

        const totalAnalyzeTime = Date.now() - analyzeStartTime;
        console.log('‚úÖ Style analysis complete in', totalAnalyzeTime + 'ms');
        console.log('üìä Style profile received');

        // Display JSON without code fence
        let styleText = typeof sty === 'string' ? sty : JSON.stringify(sty, null, 2);
        document.getElementById('style-json').textContent = styleText;
        document.getElementById('style-section').style.display = 'block';
        s.innerHTML = `<p style="color: #10b981;">‚úÖ Style analysis complete! (${(totalAnalyzeTime / 1000).toFixed(2)}s)</p>`;

        // Use prefetched news
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üì∞ NOW RETRIEVING PREFETCHED NEWS...');
        const newsWaitStart = Date.now();

        nws = await getNews();

        console.log('‚úÖ News retrieved in', (Date.now() - newsWaitStart) + 'ms');
        console.log('üì∞ News preview:', nws.substring(0, 100) + '...');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

        let nt = document.getElementById('news-text');
        nt.innerHTML = nws.split('\n\n').map(p => `<p>${p}</p>`).join('');
        document.getElementById('news-section').style.display = 'block';
        document.getElementById('cta-box').style.display = 'block';

    } catch (e) {
        console.error('‚ùå Analysis error:', e);
        s.innerHTML = `<p style="color: #ef4444;">‚ùå Error: ${e.message}</p>`;
    }
}

async function restyle() {
    if (!sty || !nws) {
        alert('Please analyze files first!');
        return;
    }

    let btn = document.getElementById('restyle-btn');
    btn.disabled = true;
    btn.textContent = 'Generating...';

    let out = document.getElementById('styled-output');
    out.innerHTML = '<p class="progress"><span class="spinner"></span>Writing in your style...</p>';
    document.getElementById('styled-section').style.display = 'block';

    try {
        let claudeVersion = 'sonnet-4';
        let r = await fetch('/restyle', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ style: sty, news: nws, claude_version: claudeVersion })
        });

        let d = await r.json();

        if (d.error) {
            out.innerHTML = `<p style="color: #ef4444;">‚ùå Error: ${d.error}</p>`;
            btn.disabled = false;
            btn.textContent = 'Write This in My Style';
            return;
        }

        let st = d.styled.split('\n\n').map(p => `<p>${p}</p>`).join('');
        out.innerHTML = st + `<div class="cost-info">üí∞ Cost: $${d.cost.toFixed(6)}</div>`;

        await showModelOptions();

        btn.disabled = false;
        btn.textContent = 'Write This in My Style';

    } catch (e) {
        out.innerHTML = `<p style="color: #ef4444;">‚ùå Error: ${e.message}</p>`;
        btn.disabled = false;
        btn.textContent = 'Write This in My Style';
    }
}

async function showModelOptions() {
    try {
        let r = await fetch('/available_models');
        let data = await r.json();

        let html = `
            <h4>‚ú® Want to see how other AI models would write this?</h4>
            <p>Compare different models' interpretations of your style:</p>
            <div class="model-buttons">
        `;

        for (let model of data.models) {
            html += `
                <button class="model-btn" onclick="restyleWithModel('${model.key}')">
                    <strong>${model.name}</strong>
                    <span>${model.description}</span>
                </button>
            `;
        }

        html += '</div>';

        document.getElementById('model-options').innerHTML = html;
        document.getElementById('model-options').style.display = 'block';

    } catch (e) {
        console.error('Error loading models:', e);
    }
}

async function restyleWithModel(modelKey) {
    let container = document.getElementById('alt-models-output');
    container.style.display = 'block';

    let modelDiv = document.getElementById(`model-${modelKey}`);
    if (!modelDiv) {
        modelDiv = document.createElement('div');
        modelDiv.id = `model-${modelKey}`;
        modelDiv.className = 'model-output';
        container.appendChild(modelDiv);
    }

    modelDiv.innerHTML = `
        <h3>ü§ñ ${modelKey}</h3>
        <div class="model-content">
            <p class="progress"><span class="spinner"></span>Generating with ${modelKey}...</p>
        </div>
    `;

    modelDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });

    let cleanSty = typeof sty === 'string' ? sty : JSON.stringify(sty);

    try {
        let r = await fetch('/restyle_with_model', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                style: cleanSty,
                news: nws,
                model: modelKey,
                claude_version: modelKey
            })
        });

        let d = await r.json();

        if (d.error) {
            modelDiv.querySelector('.model-content').innerHTML = `
                <p style="color: #ef4444;">‚ùå Error: ${d.error}</p>
            `;
            return;
        }

        let st = d.styled.split('\n\n').map(p => `<p>${p}</p>`).join('');
        modelDiv.querySelector('.model-content').innerHTML = st +
            `<div class="cost-info">üí∞ Cost: $${d.cost.toFixed(6)}</div>`;

    } catch (e) {
        modelDiv.querySelector('.model-content').innerHTML = `
            <p style="color: #ef4444;">‚ùå Error: ${e.message}</p>
        `;
    }
}

let chatMessages = [];

function updateSlider(id) {
    document.getElementById(id + 'Value').textContent = document.getElementById(id + 'Slider').value;
}

document.getElementById('tempSlider')?.addEventListener('input', () => updateSlider('temp'));
document.getElementById('tokenSlider')?.addEventListener('input', () => updateSlider('token'));

async function send() {
    let input = document.getElementById('messageInput'),
        msg = input.value.trim();
    if (!msg) return;

    input.value = '';

    let container = document.getElementById('chatContainer'),
        userDiv = document.createElement('div');
    userDiv.className = 'message user';
    userDiv.textContent = msg;
    container.appendChild(userDiv);

    chatMessages.push({ role: 'user', content: msg });

    let assistantDiv = document.createElement('div');
    assistantDiv.className = 'message assistant';
    assistantDiv.textContent = '';
    container.appendChild(assistantDiv);

    container.scrollTop = container.scrollHeight;

    try {
        let r = await fetch('/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                model: document.getElementById('modelSelect').value,
                messages: chatMessages,
                temperature: parseFloat(document.getElementById('tempSlider').value),
                max_tokens: parseInt(document.getElementById('tokenSlider').value),
                web_search: document.getElementById('webSearchToggle').checked,
                thinking: document.getElementById('thinkingToggle').checked
            })
        });

        let reader = r.body.getReader(),
            decoder = new TextDecoder(),
            fullText = '';

        while (true) {
            let { done, value } = await reader.read();
            if (done) break;

            let chunk = decoder.decode(value),
                lines = chunk.split('\n');

            for (let line of lines) {
                if (line.startsWith('data: ')) {
                    let data = line.slice(6);
                    if (data === '[DONE]') break;
                    if (data.startsWith('Error:')) {
                        assistantDiv.textContent += '\n\n' + data;
                        break;
                    }
                    fullText += data;
                    assistantDiv.textContent = fullText;
                    container.scrollTop = container.scrollHeight;
                }
            }
        }

        chatMessages.push({ role: 'assistant', content: fullText });

    } catch (e) {
        assistantDiv.textContent = 'Error: ' + e.message;
    }
}

================================================================================

FILE: ./templates/base.html
--------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>{% block title %}Style Analyzer{% endblock %}</title>
    <link rel="stylesheet" href="{{ url_for('static',filename='style.css') }}">
</head>

<body>
    <nav class="nav">
        <a href="{{ url_for('home') }}" class="nav-brand">‚úçÔ∏è Writing Style Analyzer</a>
    </nav>
    {% block content %}{% endblock %}
    <script src="{{ url_for('static',filename='app.js') }}"></script>
</body>

</html>

================================================================================

FILE: ./templates/style.html
--------------------------------------------------------------------------------
{% extends "base.html" %}
{% block title %}Style Analyzer{% endblock %}
{% block content %}
<div class="docs-wrap">
    <div class="upload-box" id="upload-box">
        <h1>‚úçÔ∏è Discover Your Writing Voice</h1>
        <p>Upload 2-5 writing samples to analyze your unique style, then see AI news written in YOUR voice</p>
        <input type="file" id="files" multiple accept=".txt,.md,.pdf,.jpg,.jpeg,.png,.doc,.docx"
            onclick="prefetchNews()" onchange="analyze()">
        <div id="upload-status"></div>
    </div>

    <div class="section" id="style-section">
        <div class="section-header" onclick="toggle('style')">
            <h3>üìä Your Style Profile (JSON)</h3>
            <span class="toggle-icon" id="style-icon">‚ñ∂</span>
        </div>
        <div class="section-content" id="style-content">
            <pre id="style-json"></pre>
        </div>
    </div>

    <div class="section" id="news-section">
        <div class="section-header" onclick="toggle('news')">
            <h3>üì∞ Latest AI News (Original)</h3>
            <span class="toggle-icon" id="news-icon">‚ñ∂</span>
        </div>
        <div class="section-content" id="news-content">
            <div class="news-text" id="news-text"></div>
        </div>
    </div>

    <div class="cta-box" id="cta-box" style="display:none;">
        <h4>‚ú® Ready to see this story in YOUR voice?</h4>
        <button id="restyle-btn" onclick="restyle()">Write This in My Style</button>
    </div>

    <div class="section" id="styled-section">
        <h3>‚úçÔ∏è Written in Your Style (Claude Sonnet 4)</h3>
        <div class="styled-output" id="styled-output"></div>
    </div>

    <div class="model-options" id="model-options"></div>

    <div class="alt-models-container" id="alt-models-output"></div>
</div>
{% endblock %}

================================================================================

FILE: ./templates/chat.html
--------------------------------------------------------------------------------
{% extends "base.html" %}
{% block title %}Chat{% endblock %}
{% block content %}
<div class="chat-wrap">
    <div class="header">
        <select id="modelSelect">{% for n,v in models.items() %}<option value="{{v}}">{{n}}</option>{% endfor
            %}</select>
        <div class="toggle-group"><label class="toggle"><input type="checkbox" id="webSearchToggle"><span
                    class="slider"></span></label><span>Web Search</span></div>
        <div class="toggle-group"><label class="toggle"><input type="checkbox" id="thinkingToggle"><span
                    class="slider"></span></label><span>Thinking</span></div>
        <div class="slider-label">Temp: <span id="tempValue">1.0</span><input type="range" id="tempSlider" min="0"
                max="1" step="0.1" value="1.0" style="width:80px;"></div>
        <div class="slider-label">Tokens: <span id="tokenValue">1024</span><input type="range" id="tokenSlider"
                min="256" max="4096" step="256" value="1024" style="width:100px;"></div>
    </div>
    <div class="chat-container" id="chatContainer"></div>
    <div class="input-area">
        <textarea id="messageInput" rows="2" placeholder="Type your message..."
            onkeydown="if(event.key==='Enter'&&!event.shiftKey){event.preventDefault();send();}"></textarea>
        <button id="sendBtn" onclick="send()">Send</button>
    </div>
</div>
{% endblock %}

================================================================================

